{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/recordings/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\n// Mock data for recordings - in a real app, this would come from a database\nlet recordings = [\n  {\n    id: 1,\n    title: \"Introduction to Artificial Intelligence\",\n    url: \"/recordings/ai-intro.mp3\",\n    duration: \"45:30\",\n    size: \"12.5 MB\",\n    date: \"2024-01-15\",\n    subject: \"Computer Science\"\n  },\n  {\n    id: 2,\n    title: \"VLSI Design Fundamentals\",\n    url: \"/recordings/vlsi-basics.mp3\",\n    duration: \"38:15\",\n    size: \"10.8 MB\",\n    date: \"2024-01-14\",\n    subject: \"Electronics\"\n  },\n  {\n    id: 3,\n    title: \"Renewable Energy Systems\",\n    url: \"/recordings/renewable-energy.mp3\",\n    duration: \"52:20\",\n    size: \"14.2 MB\",\n    date: \"2024-01-13\",\n    subject: \"Environmental Science\"\n  }\n];\n\nexport async function GET() {\n  try {\n    // Sort recordings by date (newest first)\n    const sortedRecordings = recordings.sort((a, b) => \n      new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n    \n    return NextResponse.json(sortedRecordings);\n  } catch (error) {\n    console.error(\"Error fetching recordings:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch recordings\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const data = await request.json();\n    \n    // Validate required fields\n    if (!data.title || !data.url) {\n      return NextResponse.json(\n        { error: \"Title and URL are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Create new recording\n    const newRecording = {\n      id: recordings.length + 1,\n      title: data.title,\n      url: data.url,\n      duration: data.duration || \"Unknown\",\n      size: data.size || \"Unknown\",\n      date: new Date().toISOString().split('T')[0],\n      subject: data.subject || \"General\"\n    };\n\n    recordings.push(newRecording);\n\n    return NextResponse.json(\n      { success: true, recording: newRecording },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Error creating recording:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create recording\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"Recording ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const recordingIndex = recordings.findIndex(r => r.id === parseInt(id));\n    \n    if (recordingIndex === -1) {\n      return NextResponse.json(\n        { error: \"Recording not found\" },\n        { status: 404 }\n      );\n    }\n\n    recordings.splice(recordingIndex, 1);\n\n    return NextResponse.json(\n      { success: true, message: \"Recording deleted successfully\" }\n    );\n  } catch (error) {\n    console.error(\"Error deleting recording:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete recording\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,4EAA4E;AAC5E,IAAI,aAAa;IACf;QACE,IAAI;QACJ,OAAO;QACP,KAAK;QACL,UAAU;QACV,MAAM;QACN,MAAM;QACN,SAAS;IACX;IACA;QACE,IAAI;QACJ,OAAO;QACP,KAAK;QACL,UAAU;QACV,MAAM;QACN,MAAM;QACN,SAAS;IACX;IACA;QACE,IAAI;QACJ,OAAO;QACP,KAAK;QACL,UAAU;QACV,MAAM;QACN,MAAM;QACN,SAAS;IACX;CACD;AAEM,eAAe;IACpB,IAAI;QACF,yCAAyC;QACzC,MAAM,mBAAmB,WAAW,IAAI,CAAC,CAAC,GAAG,IAC3C,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO;QAGvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,2BAA2B;QAC3B,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,GAAG,EAAE;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,eAAe;YACnB,IAAI,WAAW,MAAM,GAAG;YACxB,OAAO,KAAK,KAAK;YACjB,KAAK,KAAK,GAAG;YACb,UAAU,KAAK,QAAQ,IAAI;YAC3B,MAAM,KAAK,IAAI,IAAI;YACnB,MAAM,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YAC5C,SAAS,KAAK,OAAO,IAAI;QAC3B;QAEA,WAAW,IAAI,CAAC;QAEhB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAM,WAAW;QAAa,GACzC;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OAAO,OAAgB;IAC3C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,WAAW,SAAS,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,SAAS;QAEnE,IAAI,mBAAmB,CAAC,GAAG;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,WAAW,MAAM,CAAC,gBAAgB;QAElC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAM,SAAS;QAAiC;IAE/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}